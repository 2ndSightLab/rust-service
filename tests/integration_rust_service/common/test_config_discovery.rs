////////////////////////////////////////////////////////////////
//
//  Name: test_config_discovery
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: tests/integration_rust_service/common/test_config_discovery.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Test file for test_config_discovery
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use super::test_prerequisites;
use std::process::Command;

#[test]
fn test_config_file_precedence() {
    // Check if running as root
    assert!(
        (unsafe { libc::getuid() } != 0),
        "Tests should not be run as root"
    );

    test_prerequisites::check_debug_installation().unwrap();

    println!(
        "RUNNING: test_config_file_precedence - Testing configuration file discovery and precedence"
    );
    println!("Testing configuration file discovery...");

    // Test that the application can successfully start and find its config
    let PATHS = test_prerequisites::get_test_paths().unwrap();

    println!("Testing service startup with config from: {}", PATHS.config);

    let mut CHILD = Command::new(&PATHS.binary)
        .spawn()
        .expect("Failed to start service - config loading may have failed");

    println!("Service started successfully, config was found and loaded");
    println!("Waiting 2 seconds to verify service runs...");
    std::thread::sleep(std::time::Duration::from_secs(2));

    CHILD.kill().expect("Failed to kill service");
    let _ = CHILD.wait();

    println!("Config discovery test completed successfully");
}
