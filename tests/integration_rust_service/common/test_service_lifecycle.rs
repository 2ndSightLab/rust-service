////////////////////////////////////////////////////////////////
//
//  Name: test_service_lifecycle
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: tests/integration_rust_service/common/test_service_lifecycle.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Test file for test_service_lifecycle
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use super::test_prerequisites;
use std::fs;

#[test]
fn test_service_binary_exists() {
    println!("RUNNING: test_service_binary_exists - Testing service binary installation");
    let PATHS = test_prerequisites::get_test_paths().unwrap();

    assert!(
        fs::metadata(&PATHS.binary).is_ok(),
        "Binary should exist at {}",
        PATHS.binary
    );

    println!("Service binary validation completed");
}

#[test]
fn test_service_config_exists() {
    println!("RUNNING: test_service_config_exists - Testing service configuration installation");
    let PATHS = test_prerequisites::get_test_paths().unwrap();

    assert!(
        fs::metadata(&PATHS.config).is_ok(),
        "Config should exist at {}",
        PATHS.config
    );

    println!("Service config validation completed");
}
