////////////////////////////////////////////////////////////////
//
//  Name: test_security_workflow_integration
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: tests/integration_rust_service/common/test_security_workflow_integration.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Test file for test_security_workflow_integration
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use std::process::Command;

#[test]
fn test_security_workflow_integration() {
    let OUTPUT = Command::new("cargo")
        .args([
            "test",
            "--manifest-path",
            "../rust-common-tests/Cargo.toml",
            "tests::integration::common::test_security_workflow_integration",
            "--",
            "--nocapture",
        ])
        .current_dir(".")
        .output()
        .expect("Failed to execute security workflow integration test");

    assert!(
        OUTPUT.status.success() || OUTPUT.status.code() == Some(101),
        "Security workflow integration test failed: {}",
        String::from_utf8_lossy(&OUTPUT.stderr)
    );
}
