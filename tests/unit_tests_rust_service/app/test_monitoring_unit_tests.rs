////////////////////////////////////////////////////////////////
//
//  Name: test_monitoring_unit_tests
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: tests/unit_tests_rust_service/app/test_monitoring_unit_tests.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Test file for test_monitoring_unit_tests
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use rust_service::service::ServiceError;

fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {
    LINE.strip_prefix(PREFIX)
        .and_then(|s| s.split_whitespace().next())
        .map_or_else(
            || {
                Err(ServiceError::Config(format!(
                    "Invalid memory line format: {LINE}"
                )))
            },
            |VALUE_STR| {
                VALUE_STR.parse().map_err(|_| {
                    ServiceError::Config(format!("Failed to parse memory value: {VALUE_STR}"))
                })
            },
        )
}

#[test]
fn test_parse_memory_value_valid() {
    let LINE = "MemTotal:        8000000 kB";
    let RESULT = parse_memory_value(LINE, "MemTotal:");
    assert!(RESULT.is_ok());
    assert_eq!(RESULT.unwrap(), 8_000_000);
}

#[test]
fn test_parse_memory_value_invalid() {
    let LINE = "MemTotal:        invalid kB";
    let RESULT = parse_memory_value(LINE, "MemTotal:");
    assert!(RESULT.is_err());
}

#[test]
fn test_parse_memory_value_missing_prefix() {
    let LINE = "SomeOther:       8000000 kB";
    let RESULT = parse_memory_value(LINE, "MemTotal:");
    assert!(RESULT.is_err());
}
