////////////////////////////////////////////////////////////////
//
//  Name: test_config_tests
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: tests/unit_tests_rust_service/app/test_config_tests.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Test file for test_config_tests
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use rust_service::load_config;
use rust_service::service::Config;

#[test]
fn test_service_config_loading() {
    // Check if running as root
    assert!(
        (unsafe { libc::getuid() } != 0),
        "Tests should not be run as root"
    );

    // Try to load deployed config, create test config if it doesn't exist
    let CONFIG = load_config().unwrap_or_else(|_| {
        // Create a test config file in the executable directory
        let EXE_PATH = std::env::current_exe().expect("Cannot get executable path");
        let EXE_DIR = EXE_PATH.parent().expect("Cannot get executable directory");
        let CONFIG_PATH = EXE_DIR.join("service.toml");

        let TEST_CONFIG = r#"
LOG_FILE_PATH = "/var/log/rust-service"
INSTALL_DIR = "/opt/rust-service"
SERVICE_NAME = "test-service"
MEMORY_THRESHOLD = 80
DISK_THRESHOLD = 75
MIN_FD_LIMIT = 1024
MAX_SERVICE_NAME_LEN = 32
MAX_LOG_PATH_LEN = 500
MIN_LOG_INTERVAL_MS = 100
MAX_LOG_FILE_SIZE = 10485760
MAX_THRESHOLD_PERCENT = 100
MAX_FD_LIMIT = 65536
MAX_CONFIG_FIELD_LEN = 2000
"#;
        std::fs::write(&CONFIG_PATH, TEST_CONFIG).expect("Failed to create test config");
        load_config().expect("Should load test config")
    });

    // Verify required fields are present and reasonable
    assert!(
        !CONFIG.SERVICE_NAME.is_empty(),
        "Service name should not be empty"
    );
    assert!(
        CONFIG.MEMORY_THRESHOLD > 0 && CONFIG.MEMORY_THRESHOLD <= 100,
        "Memory threshold should be 1-100"
    );
    assert!(
        CONFIG.DISK_THRESHOLD > 0 && CONFIG.DISK_THRESHOLD <= 100,
        "Disk threshold should be 1-100"
    );
    assert!(
        CONFIG.LOG_FILE_PATH.starts_with('/'),
        "Log path should be absolute"
    );
}

// Action config test moved to test-rust-service-2 project since it's action-specific

#[test]
fn test_config_validation_valid() {
    // Test that a valid service config passes validation by attempting to parse it
    let TOML_CONTENT = r#"
LOG_FILE_PATH = "/tmp/test-logs"
INSTALL_DIR = "/opt/rust-service"
SERVICE_NAME = "test-service"
MEMORY_THRESHOLD = 80
DISK_THRESHOLD = 75
MIN_FD_LIMIT = 1024
MAX_SERVICE_NAME_LEN = 32
MAX_LOG_PATH_LEN = 500
MIN_LOG_INTERVAL_MS = 100
MAX_LOG_FILE_SIZE = 10485760
MAX_THRESHOLD_PERCENT = 100
MAX_FD_LIMIT = 65536
MAX_CONFIG_FIELD_LEN = 2000
"#;
    let PARSED: Config = toml::from_str(TOML_CONTENT).expect("Should parse valid config");
    assert_eq!(PARSED.SERVICE_NAME, "test-service");
    assert_eq!(PARSED.MEMORY_THRESHOLD, 80);
    assert_eq!(PARSED.MAX_THRESHOLD_PERCENT, 100);
}
#[test]
fn test_config_validation_invalid_service_name() {
    let TOML_CONTENT = r#"
LOG_FILE_PATH = "/tmp/test"
INSTALL_DIR = "/opt/rust-service"
SERVICE_NAME = ""
MEMORY_THRESHOLD = 80
DISK_THRESHOLD = 80
MIN_FD_LIMIT = 1024
MAX_SERVICE_NAME_LEN = 32
MAX_LOG_PATH_LEN = 500
MIN_LOG_INTERVAL_MS = 100
MAX_LOG_FILE_SIZE = 10485760
MAX_THRESHOLD_PERCENT = 100
MAX_FD_LIMIT = 65536
MAX_CONFIG_FIELD_LEN = 2000
"#;
    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect("Should parse");
    // Test would need actual validation function to work properly
    assert_eq!(CONFIG.SERVICE_NAME, "");
}

#[test]
fn test_config_validation_invalid_threshold() {
    let TOML_CONTENT = r#"
LOG_FILE_PATH = "/tmp/test"
INSTALL_DIR = "/opt/rust-service"
SERVICE_NAME = "test"
MEMORY_THRESHOLD = 101
DISK_THRESHOLD = 80
MIN_FD_LIMIT = 1024
MAX_SERVICE_NAME_LEN = 32
MAX_LOG_PATH_LEN = 500
MIN_LOG_INTERVAL_MS = 100
MAX_LOG_FILE_SIZE = 10485760
MAX_THRESHOLD_PERCENT = 100
MAX_FD_LIMIT = 65536
MAX_CONFIG_FIELD_LEN = 2000
"#;
    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect("Should parse");
    // Test would need actual validation function to work properly
    assert_eq!(CONFIG.MEMORY_THRESHOLD, 101);
}
