////////////////////////////////////////////////////////////////
//
//  Name: limits
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: src/security/limits.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  System limits checking functions
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use crate::service::service_error::ServiceError;

pub fn get_file_descriptor_limit() -> Result<u64, ServiceError> {
    #[cfg(unix)]
    {
        let mut RLIMIT = libc::rlimit {
            rlim_cur: 0,
            rlim_max: 0,
        };

        // SAFETY: getrlimit() is safe when passed a valid resource type and a valid pointer
        // to a properly initialized rlimit struct. We provide both requirements here.
        let RESULT = unsafe { libc::getrlimit(libc::RLIMIT_NOFILE, &raw mut RLIMIT) };

        if RESULT != 0 {
            // SAFETY: __errno_location() returns a valid pointer to thread-local errno
            let ERRNO = unsafe { *libc::__errno_location() };
            return Err(ServiceError::Config(format!(
                "Failed to get file descriptor limit: errno {ERRNO}"
            )));
        }

        // Validate the returned limit is reasonable
        if RLIMIT.rlim_cur == 0 || RLIMIT.rlim_cur == u64::MAX {
            return Err(ServiceError::Config(
                "Invalid file descriptor limit returned by system".to_string(),
            ));
        }

        Ok(RLIMIT.rlim_cur)
    }
    #[cfg(not(unix))]
    {
        Err(ServiceError::Config(
            "File descriptor limit check not supported on this platform".to_string(),
        ))
    }
}
