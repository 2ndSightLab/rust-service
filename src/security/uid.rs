////////////////////////////////////////////////////////////////
//
//  Name: uid
//  GitHub repository: https://github.com/2ndSightLab/rust-service.git
//  File: src/security/uid.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  User ID operations
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

use crate::service::service_error::ServiceError;

/// Gets the current user ID.
///
/// # Errors
/// Returns `ServiceError::Config` if unable to get the current user ID.
pub fn get_current_uid() -> Result<u32, ServiceError> {
    #[cfg(unix)]
    {
        // SAFETY: getuid() is always safe - it cannot fail and has no side effects
        let UID = unsafe { libc::getuid() };

        // Validate UID is reasonable (not overflow value)
        if UID == u32::MAX {
            return Err(ServiceError::Config(
                "Invalid UID returned by system".to_string(),
            ));
        }

        Ok(UID)
    }
    #[cfg(not(unix))]
    {
        Err(ServiceError::Config(
            "UID operations not supported on this platform".to_string(),
        ))
    }
}
