var searchIndex = new Map(JSON.parse('[["rust_service",{"t":"KEFONNNCNCMNNCCMNNCNNNFOOOOOOOOOOOOOOOONNNNNNNNNHHNNNNHHPPPGNNNNNNNNNNNNNJFJONNNNNHNNHNNNNNHHHHHHHHCCHHCHHHH","n":["Action","ServiceError","ServiceRunner","actions","add_action","borrow","borrow_mut","config","default","error","execute","from","into","logging","monitoring","name","new","run","security","try_from","try_into","type_id","Config","DISK_THRESHOLD","LOG_FILE_PATH","MAX_CONFIG_FIELD_LEN","MAX_FD_LIMIT","MAX_LOG_FILE_SIZE","MAX_LOG_PATH_LEN","MAX_MESSAGE_LEN","MAX_SERVICE_NAME_LEN","MAX_THRESHOLD_PERCENT","MAX_TIME_INTERVAL","MEMORY_THRESHOLD","MESSAGE","MIN_FD_LIMIT","MIN_LOG_INTERVAL_MS","SERVICE_NAME","TIME_INTERVAL","borrow","borrow_mut","clone","clone_into","clone_to_uninit","deserialize","fmt","from","into","load_config","sanitize_message","to_owned","try_from","try_into","type_id","validate_all_config_fields","validate_config_field","Config","Io","Parse","ServiceError","borrow","borrow_mut","fmt","","from","","","into","source","to_string","try_from","try_into","type_id","CONFIG","FileLogger","LAST_LOG_TIME","LOG_FILE_PATH","borrow","borrow_mut","enabled","flush","from","get_config_value","into","log","map_io_error","new","set_config","try_from","try_into","type_id","write_to_log_file","calculate_usage_percent","check_disk","check_memory","check_resources","check_threshold_and_error","safe_subtract","get_current_uid","limits","uid","validate_runtime_security","validate_service_user","validation","get_file_descriptor_limit","get_current_uid","validate_runtime_security","validate_service_user"],"q":[[0,"rust_service"],[22,"rust_service::config"],[56,"rust_service::error"],[73,"rust_service::logging"],[92,"rust_service::monitoring"],[98,"rust_service::security"],[104,"rust_service::security::limits"],[105,"rust_service::security::uid"],[106,"rust_service::security::validation"],[108,"alloc::vec"],[109,"alloc::boxed"],[110,"core::result"],[111,"core::error"],[112,"core::any"],[113,"alloc::string"],[114,"serde_core::de"],[115,"core::fmt"],[116,"core::cmp"],[117,"std::io::error"],[118,"toml::de::error"],[119,"core::option"],[120,"std::sync::once_lock"],[121,"core::sync::atomic"],[122,"log"],[123,"core::ops::function"]],"i":"```b000`0`f11``011`111`n000000000000000000000000``0000``Ab00`0000000000000```Ch00000`00`00000`````````````````","f":"```{bd}{{b{h{f}}}b}{j{{j{c}}}{}}{{{j{l}}}{{j{lc}}}{}}`{{}b}`{{{j{f}}{j{n}}}{{Ad{A`Ab}}}}{cc{}}{{}c{}}``{{{j{f}}}{{j{Af}}}}4{b{{Ad{A`{h{Ah}}}}}}`{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{jAj}`{nAl}{nAn}{nB`}{nBb}011130320020>={{{j{n}}}n}{{j{j{lc}}}A`{}}{{jBd}A`}{c{{Ad{n}}}Bf}{{{j{n}}{j{lBh}}}Bj}?>{{}{{Ad{nAb}}}}{{{j{Af}}B`}{{Ad{AnAb}}}}{jc{}}>=<{{{j{n}}}{{Ad{A`Ab}}}}{{{j{c}}{j{c}}{j{c}}{j{Af}}}{{Ad{A`Ab}}}Bl}````{j{{j{c}}}{}}{{{j{l}}}{{j{lc}}}{}}{{{j{Ab}}{j{lBh}}}Bj}0{cc{}}{BnAb}{C`Ab}{{}c{}}{{{j{Ab}}}{{Cb{{j{Ah}}}}}}{jAn}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{jAj}{{}Cd}`{{}Cf}{ChAn}>={{{j{Ch}}{j{Cj}}}Cl}{{{j{Ch}}}A`}={{ec}c{}{{D`{{j{n}}}{{Cn{c}}}}}};{{{j{Ch}}{j{Db}}}A`}{{{Dd{c}}{j{Af}}}{{Ad{cAb}}}{}}{AnCh}{nA`}<;:{{{j{Af}}{j{Af}}}{{Ad{A`Ab}}}}{{BbBb{j{Af}}}{{Ad{BbAb}}}}{Al{{Ad{A`Ab}}}}0{{{j{n}}}{{Ad{A`Ab}}}}{{BbAl{j{Af}}}{{Ad{A`Ab}}}}3{{}{{Ad{AlAb}}}}``2{{{j{Af}}B`}{{Ad{A`Ab}}}}`{{}{{Ad{BbAb}}}}241","D":"Bh","p":[[5,"ServiceRunner",0],[5,"Vec",108],[10,"Action",0],[5,"Box",109,null,1],[1,"reference",null,null,1],[0,"mut"],[5,"Config",22],[1,"unit"],[6,"ServiceError",56],[6,"Result",110,null,1],[1,"str"],[10,"Error",111],[5,"TypeId",112],[1,"u32"],[5,"String",113],[1,"usize"],[1,"u64"],[1,"u8"],[10,"Deserializer",114],[5,"Formatter",115],[8,"Result",115],[10,"PartialOrd",116],[5,"Error",117],[5,"Error",118],[6,"Option",119,null,1],[5,"OnceLock",120],[5,"AtomicU64",121],[5,"FileLogger",73],[5,"Metadata",122],[1,"bool"],[17,"Output"],[10,"FnOnce",123],[5,"Record",122],[8,"Result",117,null,1]],"r":[[1,56],[98,105],[101,106],[102,106]],"b":[[62,"impl-Display-for-ServiceError"],[63,"impl-Debug-for-ServiceError"],[65,"impl-From%3CError%3E-for-ServiceError"],[66,"impl-From%3CError%3E-for-ServiceError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFgADQAAAAAAAgAAAAQABgAOAAMAEwAbADIADgBCAAEARQAMAFMAAABVAAoAYQABAGQAAQBoAAEA","P":[[5,"T"],[8,""],[11,"T"],[12,"U"],[15,""],[19,"U,T"],[20,"U"],[21,""],[39,"T"],[41,""],[42,"T"],[43,""],[44,"__D"],[45,""],[46,"T"],[47,"U"],[48,""],[50,"T"],[51,"U,T"],[52,"U"],[53,""],[55,"T"],[62,""],[64,"T"],[65,""],[67,"U"],[68,""],[70,"U,T"],[71,"U"],[72,""],[77,"T"],[79,""],[81,"T"],[82,"T,F"],[83,"U"],[84,""],[85,"T"],[86,""],[88,"U,T"],[89,"U"],[90,""]]}],["rust_service",{"t":"KEFONNNCNCMNNCCMNNCNNNFOOOOOOOOOOOOOOOONNNNNNNNNHHNNNNHPPPGNNNNNNNNNNNNNJFJONNNNNHNNHNNNNNHHHHHHHHCCHHCHHHH","n":["Action","ServiceError","ServiceRunner","actions","add_action","borrow","borrow_mut","config","default","error","execute","from","into","logging","monitoring","name","new","run","security","try_from","try_into","type_id","Config","DISK_THRESHOLD","LOG_FILE_PATH","MAX_CONFIG_FIELD_LEN","MAX_FD_LIMIT","MAX_LOG_FILE_SIZE","MAX_LOG_PATH_LEN","MAX_MESSAGE_LEN","MAX_SERVICE_NAME_LEN","MAX_THRESHOLD_PERCENT","MAX_TIME_INTERVAL","MEMORY_THRESHOLD","MESSAGE","MIN_FD_LIMIT","MIN_LOG_INTERVAL_MS","SERVICE_NAME","TIME_INTERVAL","borrow","borrow_mut","clone","clone_into","clone_to_uninit","deserialize","fmt","from","into","load_config","sanitize_message","to_owned","try_from","try_into","type_id","validate_config_field","Config","Io","Parse","ServiceError","borrow","borrow_mut","fmt","","from","","","into","source","to_string","try_from","try_into","type_id","CONFIG","FileLogger","LAST_LOG_TIME","LOG_FILE_PATH","borrow","borrow_mut","enabled","flush","from","get_config_value","into","log","map_io_error","new","set_config","try_from","try_into","type_id","write_to_log_file","calculate_usage_percent","check_disk","check_memory","check_resources","check_threshold_and_error","safe_subtract","get_current_uid","limits","uid","validate_runtime_security","validate_service_user","validation","get_file_descriptor_limit","get_current_uid","validate_runtime_security","validate_service_user"],"q":[[0,"rust_service"],[22,"rust_service::config"],[55,"rust_service::error"],[72,"rust_service::logging"],[91,"rust_service::monitoring"],[97,"rust_service::security"],[103,"rust_service::security::limits"],[104,"rust_service::security::uid"],[105,"rust_service::security::validation"],[107,"alloc::vec"],[108,"alloc::boxed"],[109,"core::result"],[110,"core::error"],[111,"core::any"],[112,"alloc::string"],[113,"serde_core::de"],[114,"core::fmt"],[115,"core::cmp"],[116,"toml::de::error"],[117,"std::io::error"],[118,"core::option"],[119,"std::sync::once_lock"],[120,"core::sync::atomic"],[121,"log"],[122,"core::ops::function"]],"i":"```b000`0`f11``011`111`n000000000000000000000000``0000`Ab00`0000000000000```Ch00000`00`00000`````````````````","f":"```{bd}{{b{h{f}}}b}{j{{j{c}}}{}}{{{j{l}}}{{j{lc}}}{}}`{{}b}`{{{j{f}}{j{n}}}{{Ad{A`Ab}}}}{cc{}}{{}c{}}``{{{j{f}}}{{j{Af}}}}4{b{{Ad{A`{h{Ah}}}}}}`{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{jAj}`{nAl}{nAn}{nB`}{nBb}011130320020>={{{j{n}}}n}{{j{j{lc}}}A`{}}{{jBd}A`}{c{{Ad{n}}}Bf}{{{j{n}}{j{lBh}}}Bj}?>{{}{{Ad{nAb}}}}{{{j{Af}}B`}{{Ad{AnAb}}}}{jc{}}>=<{{{j{c}}{j{c}}{j{c}}{j{Af}}}{{Ad{A`Ab}}}Bl}````{j{{j{c}}}{}}{{{j{l}}}{{j{lc}}}{}}{{{j{Ab}}{j{lBh}}}Bj}0{BnAb}{C`Ab}{cc{}}{{}c{}}{{{j{Ab}}}{{Cb{{j{Ah}}}}}}{jAn}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{jAj}{{}Cd}`{{}Cf}{ChAn}>={{{j{Ch}}{j{Cj}}}Cl}{{{j{Ch}}}A`};{{ec}c{}{{D`{{j{n}}}{{Cn{c}}}}}};{{{j{Ch}}{j{Db}}}A`}{{{Dd{c}}{j{Af}}}{{Ad{cAb}}}{}}{AnCh}{nA`}<;:{{{j{Af}}{j{Af}}}{{Ad{A`Ab}}}}{{BbBb{j{Af}}}{{Ad{BbAb}}}}{Al{{Ad{A`Ab}}}}0{{{j{n}}}{{Ad{A`Ab}}}}{{BbAl{j{Af}}}{{Ad{A`Ab}}}}3{{}{{Ad{AlAb}}}}``2{{{j{Af}}B`}{{Ad{A`Ab}}}}`{{}{{Ad{BbAb}}}}241","D":"Bh","p":[[5,"ServiceRunner",0],[5,"Vec",107],[10,"Action",0],[5,"Box",108,null,1],[1,"reference",null,null,1],[0,"mut"],[5,"Config",22],[1,"unit"],[6,"ServiceError",55],[6,"Result",109,null,1],[1,"str"],[10,"Error",110],[5,"TypeId",111],[1,"u32"],[5,"String",112],[1,"usize"],[1,"u64"],[1,"u8"],[10,"Deserializer",113],[5,"Formatter",114],[8,"Result",114],[10,"PartialOrd",115],[5,"Error",116],[5,"Error",117],[6,"Option",118,null,1],[5,"OnceLock",119],[5,"AtomicU64",120],[5,"FileLogger",72],[5,"Metadata",121],[1,"bool"],[17,"Output"],[10,"FnOnce",122],[5,"Record",121],[8,"Result",117,null,1]],"r":[[1,55],[97,104],[100,105],[101,105]],"b":[[61,"impl-Debug-for-ServiceError"],[62,"impl-Display-for-ServiceError"],[63,"impl-From%3CError%3E-for-ServiceError"],[64,"impl-From%3CError%3E-for-ServiceError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFcADAAAAAAAAgAAAAQABgAOAAMAEwAbADIADwBEAAwAUgAAAFQACgBgAAEAYwABAGcAAQA=","P":[[5,"T"],[8,""],[11,"T"],[12,"U"],[15,""],[19,"U,T"],[20,"U"],[21,""],[39,"T"],[41,""],[42,"T"],[43,""],[44,"__D"],[45,""],[46,"T"],[47,"U"],[48,""],[50,"T"],[51,"U,T"],[52,"U"],[53,""],[54,"T"],[61,""],[65,"T"],[66,"U"],[67,""],[69,"U,T"],[70,"U"],[71,""],[76,"T"],[78,""],[80,"T"],[81,"T,F"],[82,"U"],[83,""],[84,"T"],[85,""],[87,"U,T"],[88,"U"],[89,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[4499,4435]}