{"$message_type":"diagnostic","message":"field `DEFAULT_MESSAGE_LEN` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/config.rs","byte_start":164,"byte_end":170,"line_start":8,"line_end":8,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Config {","highlight_start":12,"highlight_end":18}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":550,"byte_end":569,"line_start":21,"line_end":21,"column_start":9,"column_end":28,"is_primary":true,"text":[{"text":"    pub DEFAULT_MESSAGE_LEN: usize,","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Config` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `DEFAULT_MESSAGE_LEN` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/config.rs:21:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Config {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub DEFAULT_MESSAGE_LEN: usize,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Config` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RLIMIT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":528,"byte_end":534,"line_start":35,"line_end":35,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        let mut RLIMIT = libc::rlimit { rlim_cur: 0, rlim_max: 0 };","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":528,"byte_end":534,"line_start":35,"line_end":35,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        let mut RLIMIT = libc::rlimit { rlim_cur: 0, rlim_max: 0 };","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":"rlimit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RLIMIT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:35:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut RLIMIT = libc::rlimit { rlim_cur: 0, rlim_max: 0 };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rlimit`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SERVICE_NAME` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":943,"byte_end":955,"line_start":48,"line_end":48,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"fn validate_service_user(SERVICE_NAME: &str, MAX_LEN: usize) -> Result<(), String> {","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":943,"byte_end":955,"line_start":48,"line_end":48,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"fn validate_service_user(SERVICE_NAME: &str, MAX_LEN: usize) -> Result<(), String> {","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":"service_name","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SERVICE_NAME` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:48:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn validate_service_user(SERVICE_NAME: &str, MAX_LEN: usize) -> Result<(), String> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `service_name`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MAX_LEN` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":963,"byte_end":970,"line_start":48,"line_end":48,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"fn validate_service_user(SERVICE_NAME: &str, MAX_LEN: usize) -> Result<(), String> {","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":963,"byte_end":970,"line_start":48,"line_end":48,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"fn validate_service_user(SERVICE_NAME: &str, MAX_LEN: usize) -> Result<(), String> {","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":"max_len","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MAX_LEN` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:48:46\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn validate_service_user(SERVICE_NAME: &str, MAX_LEN: usize) -> Result<(), String> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `max_len`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CURRENT_UID` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1433,"byte_end":1444,"line_start":60,"line_end":60,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let CURRENT_UID = get_current_uid();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1433,"byte_end":1444,"line_start":60,"line_end":60,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let CURRENT_UID = get_current_uid();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"current_uid","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CURRENT_UID` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:60:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let CURRENT_UID = get_current_uid();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `current_uid`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `OUTPUT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1538,"byte_end":1544,"line_start":63,"line_end":63,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"        if let Ok(OUTPUT) = std::process::Command::new(\"id\").arg(\"-u\").arg(SERVICE_NAME).output()","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1538,"byte_end":1544,"line_start":63,"line_end":63,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"        if let Ok(OUTPUT) = std::process::Command::new(\"id\").arg(\"-u\").arg(SERVICE_NAME).output()","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":"output","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `OUTPUT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:63:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Ok(OUTPUT) = std::process::Command::new(\"id\").arg(\"-u\").arg(SERVICE_NAME).output()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `output`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `EXPECTED_UID` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1679,"byte_end":1691,"line_start":65,"line_end":65,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"            && let Ok(EXPECTED_UID) = String::from_utf8_lossy(&OUTPUT.stdout).trim().parse::<u32>()","highlight_start":23,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1679,"byte_end":1691,"line_start":65,"line_end":65,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"            && let Ok(EXPECTED_UID) = String::from_utf8_lossy(&OUTPUT.stdout).trim().parse::<u32>()","highlight_start":23,"highlight_end":35}],"label":null,"suggested_replacement":"expected_uid","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `EXPECTED_UID` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:65:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            && let Ok(EXPECTED_UID) = String::from_utf8_lossy(&OUTPUT.stdout).trim().parse::<u32>()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `expected_uid`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1985,"byte_end":1991,"line_start":73,"line_end":73,"column_start":30,"column_end":36,"is_primary":true,"text":[{"text":"fn validate_runtime_security(CONFIG: &config::Config) -> Result<(), String> {","highlight_start":30,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1985,"byte_end":1991,"line_start":73,"line_end":73,"column_start":30,"column_end":36,"is_primary":true,"text":[{"text":"fn validate_runtime_security(CONFIG: &config::Config) -> Result<(), String> {","highlight_start":30,"highlight_end":36}],"label":null,"suggested_replacement":"config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:73:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn validate_runtime_security(CONFIG: &config::Config) -> Result<(), String> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `UID` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":2107,"byte_end":2110,"line_start":77,"line_end":77,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let UID = get_current_uid();","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2107,"byte_end":2110,"line_start":77,"line_end":77,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let UID = get_current_uid();","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"uid","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `UID` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:77:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let UID = get_current_uid();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `uid`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `FD_LIMIT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":2322,"byte_end":2330,"line_start":83,"line_end":83,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let FD_LIMIT = get_file_descriptor_limit()?;","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2322,"byte_end":2330,"line_start":83,"line_end":83,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let FD_LIMIT = get_file_descriptor_limit()?;","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"fd_limit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `FD_LIMIT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:83:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let FD_LIMIT = get_file_descriptor_limit()?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `fd_limit`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":2613,"byte_end":2619,"line_start":94,"line_end":94,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"        Ok(CONFIG) => CONFIG,","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2613,"byte_end":2619,"line_start":94,"line_end":94,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"        Ok(CONFIG) => CONFIG,","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":"config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:94:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(CONFIG) => CONFIG,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":2571,"byte_end":2577,"line_start":93,"line_end":93,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let CONFIG = match load_config() {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2571,"byte_end":2577,"line_start":93,"line_end":93,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let CONFIG = match load_config() {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:93:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let CONFIG = match load_config() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LOGGER` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3179,"byte_end":3185,"line_start":113,"line_end":113,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let LOGGER = FileLogger::new(CONFIG.LOG_FILE_PATH.clone());","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3179,"byte_end":3185,"line_start":113,"line_end":113,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let LOGGER = FileLogger::new(CONFIG.LOG_FILE_PATH.clone());","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"logger","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LOGGER` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:113:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LOGGER = FileLogger::new(CONFIG.LOG_FILE_PATH.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `logger`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RUNNING` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3485,"byte_end":3492,"line_start":121,"line_end":121,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let RUNNING = Arc::new(AtomicBool::new(true));","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3485,"byte_end":3492,"line_start":121,"line_end":121,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let RUNNING = Arc::new(AtomicBool::new(true));","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"running","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RUNNING` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:121:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RUNNING = Arc::new(AtomicBool::new(true));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `running`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3536,"byte_end":3537,"line_start":122,"line_end":122,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = RUNNING.clone();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3536,"byte_end":3537,"line_start":122,"line_end":122,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = RUNNING.clone();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:122:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let R = RUNNING.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `LOG_FILE_PATH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":380,"byte_end":393,"line_start":14,"line_end":14,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    LOG_FILE_PATH: String,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":380,"byte_end":393,"line_start":14,"line_end":14,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    LOG_FILE_PATH: String,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":"log_file_path","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `LOG_FILE_PATH` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    LOG_FILE_PATH: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `log_file_path`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LOG_FILE_PATH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":439,"byte_end":452,"line_start":18,"line_end":18,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn new(LOG_FILE_PATH: String) -> Self {","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":439,"byte_end":452,"line_start":18,"line_end":18,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn new(LOG_FILE_PATH: String) -> Self {","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":"log_file_path","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LOG_FILE_PATH` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:18:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(LOG_FILE_PATH: String) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `log_file_path`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG_VALUE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":536,"byte_end":548,"line_start":22,"line_end":22,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"    pub fn set_config(CONFIG_VALUE: Config) {","highlight_start":23,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":536,"byte_end":548,"line_start":22,"line_end":22,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"    pub fn set_config(CONFIG_VALUE: Config) {","highlight_start":23,"highlight_end":35}],"label":null,"suggested_replacement":"config_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG_VALUE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:22:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_config(CONFIG_VALUE: Config) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CFG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":576,"byte_end":579,"line_start":23,"line_end":23,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"        let mut CFG = CONFIG.lock().unwrap();","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":576,"byte_end":579,"line_start":23,"line_end":23,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"        let mut CFG = CONFIG.lock().unwrap();","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"cfg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CFG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:23:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut CFG = CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `cfg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `DURATION` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":888,"byte_end":896,"line_start":35,"line_end":35,"column_start":16,"column_end":24,"is_primary":true,"text":[{"text":"            Ok(DURATION) => {","highlight_start":16,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":888,"byte_end":896,"line_start":35,"line_end":35,"column_start":16,"column_end":24,"is_primary":true,"text":[{"text":"            Ok(DURATION) => {","highlight_start":16,"highlight_end":24}],"label":null,"suggested_replacement":"duration","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `DURATION` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:35:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Ok(DURATION) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `duration`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `NOW` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":814,"byte_end":817,"line_start":34,"line_end":34,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let NOW = match SystemTime::now().duration_since(UNIX_EPOCH) {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":814,"byte_end":817,"line_start":34,"line_end":34,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let NOW = match SystemTime::now().duration_since(UNIX_EPOCH) {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"now","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `NOW` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:34:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let NOW = match SystemTime::now().duration_since(UNIX_EPOCH) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `now`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CFG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1131,"byte_end":1134,"line_start":43,"line_end":43,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let CFG = CONFIG.lock().unwrap();","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1131,"byte_end":1134,"line_start":43,"line_end":43,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let CFG = CONFIG.lock().unwrap();","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"cfg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CFG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:43:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let CFG = CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `cfg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MIN_INTERVAL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1098,"byte_end":1110,"line_start":42,"line_end":42,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let MIN_INTERVAL = {","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1098,"byte_end":1110,"line_start":42,"line_end":42,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let MIN_INTERVAL = {","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"min_interval","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MIN_INTERVAL` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:42:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let MIN_INTERVAL = {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `min_interval`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LAST_TIME` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1257,"byte_end":1266,"line_start":47,"line_end":47,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        let LAST_TIME = LAST_LOG_TIME.load(Ordering::Relaxed);","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1257,"byte_end":1266,"line_start":47,"line_end":47,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        let LAST_TIME = LAST_LOG_TIME.load(Ordering::Relaxed);","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"last_time","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LAST_TIME` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:47:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let LAST_TIME = LAST_LOG_TIME.load(Ordering::Relaxed);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `last_time`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CFG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1551,"byte_end":1554,"line_start":55,"line_end":55,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let CFG = CONFIG.lock().unwrap();","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1551,"byte_end":1554,"line_start":55,"line_end":55,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let CFG = CONFIG.lock().unwrap();","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"cfg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CFG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:55:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let CFG = CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `cfg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MAX_MSG_LEN` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1519,"byte_end":1530,"line_start":54,"line_end":54,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let MAX_MSG_LEN = {","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1519,"byte_end":1530,"line_start":54,"line_end":54,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let MAX_MSG_LEN = {","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"max_msg_len","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MAX_MSG_LEN` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:54:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let MAX_MSG_LEN = {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `max_msg_len`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `ESCAPED_MSG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1726,"byte_end":1737,"line_start":60,"line_end":60,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let ESCAPED_MSG = record.args().to_string()","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1726,"byte_end":1737,"line_start":60,"line_end":60,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let ESCAPED_MSG = record.args().to_string()","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"escaped_msg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `ESCAPED_MSG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:60:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let ESCAPED_MSG = record.args().to_string()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `escaped_msg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MESSAGE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":1969,"byte_end":1976,"line_start":67,"line_end":67,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let MESSAGE = format!(\"[{}] [{}] {ESCAPED_MSG}\", NOW / 1000, record.level());","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":1969,"byte_end":1976,"line_start":67,"line_end":67,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let MESSAGE = format!(\"[{}] [{}] {ESCAPED_MSG}\", NOW / 1000, record.level());","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"message","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MESSAGE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:67:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let MESSAGE = format!(\"[{}] [{}] {ESCAPED_MSG}\", NOW / 1000, record.level());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `message`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `FD` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":2194,"byte_end":2196,"line_start":75,"line_end":75,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"fn acquire_file_lock(FD: i32) -> Result<(), ServiceError> {","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":2194,"byte_end":2196,"line_start":75,"line_end":75,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"fn acquire_file_lock(FD: i32) -> Result<(), ServiceError> {","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":"fd","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `FD` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:75:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn acquire_file_lock(FD: i32) -> Result<(), ServiceError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `fd`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LOG_FILE_PATH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":2609,"byte_end":2622,"line_start":96,"line_end":96,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"fn write_to_log_file(LOG_FILE_PATH: &str, MESSAGE: &str) -> Result<(), ServiceError> {","highlight_start":22,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":2609,"byte_end":2622,"line_start":96,"line_end":96,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"fn write_to_log_file(LOG_FILE_PATH: &str, MESSAGE: &str) -> Result<(), ServiceError> {","highlight_start":22,"highlight_end":35}],"label":null,"suggested_replacement":"log_file_path","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LOG_FILE_PATH` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:96:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn write_to_log_file(LOG_FILE_PATH: &str, MESSAGE: &str) -> Result<(), ServiceError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `log_file_path`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MESSAGE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":2630,"byte_end":2637,"line_start":96,"line_end":96,"column_start":43,"column_end":50,"is_primary":true,"text":[{"text":"fn write_to_log_file(LOG_FILE_PATH: &str, MESSAGE: &str) -> Result<(), ServiceError> {","highlight_start":43,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":2630,"byte_end":2637,"line_start":96,"line_end":96,"column_start":43,"column_end":50,"is_primary":true,"text":[{"text":"fn write_to_log_file(LOG_FILE_PATH: &str, MESSAGE: &str) -> Result<(), ServiceError> {","highlight_start":43,"highlight_end":50}],"label":null,"suggested_replacement":"message","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MESSAGE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:96:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn write_to_log_file(LOG_FILE_PATH: &str, MESSAGE: &str) -> Result<(), ServiceError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `message`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LOG_DIR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":2683,"byte_end":2690,"line_start":97,"line_end":97,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let LOG_DIR = Path::new(LOG_FILE_PATH);","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":2683,"byte_end":2690,"line_start":97,"line_end":97,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let LOG_DIR = Path::new(LOG_FILE_PATH);","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"log_dir","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LOG_DIR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:97:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LOG_DIR = Path::new(LOG_FILE_PATH);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `log_dir`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LOG_FILE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":2848,"byte_end":2856,"line_start":101,"line_end":101,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let LOG_FILE = LOG_DIR.join(\"service.log\");","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":2848,"byte_end":2856,"line_start":101,"line_end":101,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let LOG_FILE = LOG_DIR.join(\"service.log\");","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"log_file","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LOG_FILE` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:101:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LOG_FILE = LOG_DIR.join(\"service.log\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `log_file`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `FILE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":2918,"byte_end":2922,"line_start":104,"line_end":104,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let FILE = {","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":2918,"byte_end":2922,"line_start":104,"line_end":104,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let FILE = {","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"file","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `FILE` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:104:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let FILE = {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `file`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `FILE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":3314,"byte_end":3318,"line_start":120,"line_end":120,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut FILE = FILE.map_err(|_| ServiceError::Config(\"Cannot open log file\".to_string()))?;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":3314,"byte_end":3318,"line_start":120,"line_end":120,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut FILE = FILE.map_err(|_| ServiceError::Config(\"Cannot open log file\".to_string()))?;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"file","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `FILE` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:120:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut FILE = FILE.map_err(|_| ServiceError::Config(\"Cannot open log file\".to_string()))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `file`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `FD` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":3527,"byte_end":3529,"line_start":127,"line_end":127,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let FD = FILE.as_raw_fd();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":3527,"byte_end":3529,"line_start":127,"line_end":127,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let FD = FILE.as_raw_fd();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"fd","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `FD` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:127:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let FD = FILE.as_raw_fd();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `fd`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `METADATA` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":3603,"byte_end":3611,"line_start":130,"line_end":130,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let METADATA = FILE.metadata()","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":3603,"byte_end":3611,"line_start":130,"line_end":130,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let METADATA = FILE.metadata()","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"metadata","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `METADATA` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:130:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let METADATA = FILE.metadata()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `metadata`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CURRENT_UID` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":3740,"byte_end":3751,"line_start":133,"line_end":133,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let CURRENT_UID = get_current_uid();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":3740,"byte_end":3751,"line_start":133,"line_end":133,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let CURRENT_UID = get_current_uid();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"current_uid","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CURRENT_UID` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:133:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let CURRENT_UID = get_current_uid();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `current_uid`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CFG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":3993,"byte_end":3996,"line_start":140,"line_end":140,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let CFG = CONFIG.lock().unwrap();","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":3993,"byte_end":3996,"line_start":140,"line_end":140,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let CFG = CONFIG.lock().unwrap();","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"cfg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CFG` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:140:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let CFG = CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `cfg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MAX_SIZE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":3968,"byte_end":3976,"line_start":139,"line_end":139,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let MAX_SIZE = {","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":3968,"byte_end":3976,"line_start":139,"line_end":139,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let MAX_SIZE = {","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"max_size","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MAX_SIZE` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:139:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let MAX_SIZE = {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `max_size`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CURRENT_POS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/logging.rs","byte_start":4104,"byte_end":4115,"line_start":144,"line_end":144,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"    let CURRENT_POS = FILE.seek(SeekFrom::End(0))","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/logging.rs","byte_start":4104,"byte_end":4115,"line_start":144,"line_end":144,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"    let CURRENT_POS = FILE.seek(SeekFrom::End(0))","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":"current_pos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CURRENT_POS` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/logging.rs:144:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let CURRENT_POS = FILE.seek(SeekFrom::End(0))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `current_pos`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":111,"byte_end":117,"line_start":6,"line_end":6,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"pub fn check_resources(CONFIG: &Config) -> Result<(), ServiceError> {","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":111,"byte_end":117,"line_start":6,"line_end":6,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"pub fn check_resources(CONFIG: &Config) -> Result<(), ServiceError> {","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":"config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:6:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn check_resources(CONFIG: &Config) -> Result<(), ServiceError> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `THRESHOLD` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":272,"byte_end":281,"line_start":12,"line_end":12,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"fn check_memory(THRESHOLD: u32) -> Result<(), ServiceError> {","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":272,"byte_end":281,"line_start":12,"line_end":12,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"fn check_memory(THRESHOLD: u32) -> Result<(), ServiceError> {","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":"threshold","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `THRESHOLD` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:12:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn check_memory(THRESHOLD: u32) -> Result<(), ServiceError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `threshold`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `MEMINFO` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":326,"byte_end":333,"line_start":13,"line_end":13,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let MEMINFO = fs::read_to_string(\"/proc/meminfo\")","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":326,"byte_end":333,"line_start":13,"line_end":13,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let MEMINFO = fs::read_to_string(\"/proc/meminfo\")","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"meminfo","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `MEMINFO` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let MEMINFO = fs::read_to_string(\"/proc/meminfo\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `meminfo`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `TOTAL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":490,"byte_end":495,"line_start":16,"line_end":16,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    let mut TOTAL = None;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":490,"byte_end":495,"line_start":16,"line_end":16,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    let mut TOTAL = None;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"total","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TOTAL` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:16:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut TOTAL = None;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `total`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `AVAILABLE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":516,"byte_end":525,"line_start":17,"line_end":17,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    let mut AVAILABLE = None;","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":516,"byte_end":525,"line_start":17,"line_end":17,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    let mut AVAILABLE = None;","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"available","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AVAILABLE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:17:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut AVAILABLE = None;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `available`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":543,"byte_end":547,"line_start":19,"line_end":19,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    for LINE in MEMINFO.lines() {","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":543,"byte_end":547,"line_start":19,"line_end":19,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    for LINE in MEMINFO.lines() {","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:19:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for LINE in MEMINFO.lines() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `VALUE_STR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":589,"byte_end":598,"line_start":20,"line_end":20,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        if let Some(VALUE_STR) = LINE.strip_prefix(\"MemTotal:\").and_then(|s| s.split_whitespace().next()) {","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":589,"byte_end":598,"line_start":20,"line_end":20,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        if let Some(VALUE_STR) = LINE.strip_prefix(\"MemTotal:\").and_then(|s| s.split_whitespace().next()) {","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":"value_str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `VALUE_STR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:20:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(VALUE_STR) = LINE.strip_prefix(\"MemTotal:\").and_then(|s| s.split_whitespace().next()) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `value_str`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `VALUE_STR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":755,"byte_end":764,"line_start":22,"line_end":22,"column_start":28,"column_end":37,"is_primary":true,"text":[{"text":"        } else if let Some(VALUE_STR) = LINE.strip_prefix(\"MemAvailable:\").and_then(|s| s.split_whitespace().next()) {","highlight_start":28,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":755,"byte_end":764,"line_start":22,"line_end":22,"column_start":28,"column_end":37,"is_primary":true,"text":[{"text":"        } else if let Some(VALUE_STR) = LINE.strip_prefix(\"MemAvailable:\").and_then(|s| s.split_whitespace().next()) {","highlight_start":28,"highlight_end":37}],"label":null,"suggested_replacement":"value_str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `VALUE_STR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:22:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else if let Some(VALUE_STR) = LINE.strip_prefix(\"MemAvailable:\").and_then(|s| s.split_whitespace().next()) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `value_str`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `TOTAL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":927,"byte_end":932,"line_start":27,"line_end":27,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    let TOTAL = TOTAL.ok_or_else(|| ServiceError::Config(\"Memory info unavailable\".to_string()))?;","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":927,"byte_end":932,"line_start":27,"line_end":27,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    let TOTAL = TOTAL.ok_or_else(|| ServiceError::Config(\"Memory info unavailable\".to_string()))?;","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":"total","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TOTAL` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:27:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let TOTAL = TOTAL.ok_or_else(|| ServiceError::Config(\"Memory info unavailable\".to_string()))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `total`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `AVAILABLE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1026,"byte_end":1035,"line_start":28,"line_end":28,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    let AVAILABLE = AVAILABLE.ok_or_else(|| ServiceError::Config(\"Memory info unavailable\".to_string()))?;","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1026,"byte_end":1035,"line_start":28,"line_end":28,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    let AVAILABLE = AVAILABLE.ok_or_else(|| ServiceError::Config(\"Memory info unavailable\".to_string()))?;","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"available","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AVAILABLE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:28:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let AVAILABLE = AVAILABLE.ok_or_else(|| ServiceError::Config(\"Memory info unavailable\".to_string()))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `available`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `USED` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1157,"byte_end":1161,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let USED = TOTAL.checked_sub(AVAILABLE)","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1157,"byte_end":1161,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let USED = TOTAL.checked_sub(AVAILABLE)","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"used","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `USED` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:31:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let USED = TOTAL.checked_sub(AVAILABLE)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `used`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `USAGE_PERCENT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1293,"byte_end":1306,"line_start":33,"line_end":33,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let USAGE_PERCENT = USED.checked_mul(100).and_then(|x| x.checked_div(TOTAL))","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1293,"byte_end":1306,"line_start":33,"line_end":33,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let USAGE_PERCENT = USED.checked_mul(100).and_then(|x| x.checked_div(TOTAL))","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"usage_percent","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `USAGE_PERCENT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:33:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let USAGE_PERCENT = USED.checked_mul(100).and_then(|x| x.checked_div(TOTAL))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `usage_percent`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `ERROR_MSG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1536,"byte_end":1545,"line_start":37,"line_end":37,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let ERROR_MSG = format!(\"Memory usage >= {THRESHOLD}%\");","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1536,"byte_end":1545,"line_start":37,"line_end":37,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let ERROR_MSG = format!(\"Memory usage >= {THRESHOLD}%\");","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":"error_msg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `ERROR_MSG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:37:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ERROR_MSG = format!(\"Memory usage >= {THRESHOLD}%\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `error_msg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `THRESHOLD` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1724,"byte_end":1733,"line_start":45,"line_end":45,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"fn check_disk(THRESHOLD: u32) -> Result<(), ServiceError> {","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1724,"byte_end":1733,"line_start":45,"line_end":45,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"fn check_disk(THRESHOLD: u32) -> Result<(), ServiceError> {","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"threshold","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `THRESHOLD` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:45:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn check_disk(THRESHOLD: u32) -> Result<(), ServiceError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `threshold`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `OUTPUT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1778,"byte_end":1784,"line_start":46,"line_end":46,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let OUTPUT = std::process::Command::new(\"stat\")","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1778,"byte_end":1784,"line_start":46,"line_end":46,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let OUTPUT = std::process::Command::new(\"stat\")","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"output","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `OUTPUT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:46:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let OUTPUT = std::process::Command::new(\"stat\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `output`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `OUTPUT_STR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":1996,"byte_end":2006,"line_start":51,"line_end":51,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    let OUTPUT_STR = String::from_utf8_lossy(&OUTPUT.stdout);","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":1996,"byte_end":2006,"line_start":51,"line_end":51,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    let OUTPUT_STR = String::from_utf8_lossy(&OUTPUT.stdout);","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"output_str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `OUTPUT_STR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:51:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let OUTPUT_STR = String::from_utf8_lossy(&OUTPUT.stdout);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `output_str`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `PARTS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":2058,"byte_end":2063,"line_start":52,"line_end":52,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    let PARTS: Vec<&str> = OUTPUT_STR.split_whitespace().collect();","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":2058,"byte_end":2063,"line_start":52,"line_end":52,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    let PARTS: Vec<&str> = OUTPUT_STR.split_whitespace().collect();","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":"parts","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PARTS` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:52:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let PARTS: Vec<&str> = OUTPUT_STR.split_whitespace().collect();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `parts`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `AVAILABLE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":2166,"byte_end":2175,"line_start":55,"line_end":55,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"        && let (Ok(AVAILABLE), Ok(TOTAL)) = (PARTS[0].parse::<u64>(), PARTS[1].parse::<u64>())","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":2166,"byte_end":2175,"line_start":55,"line_end":55,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"        && let (Ok(AVAILABLE), Ok(TOTAL)) = (PARTS[0].parse::<u64>(), PARTS[1].parse::<u64>())","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":"available","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AVAILABLE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:55:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        && let (Ok(AVAILABLE), Ok(TOTAL)) = (PARTS[0].parse::<u64>(), PARTS[1].parse::<u64>())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `available`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `TOTAL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":2181,"byte_end":2186,"line_start":55,"line_end":55,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"        && let (Ok(AVAILABLE), Ok(TOTAL)) = (PARTS[0].parse::<u64>(), PARTS[1].parse::<u64>())","highlight_start":35,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":2181,"byte_end":2186,"line_start":55,"line_end":55,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"        && let (Ok(AVAILABLE), Ok(TOTAL)) = (PARTS[0].parse::<u64>(), PARTS[1].parse::<u64>())","highlight_start":35,"highlight_end":40}],"label":null,"suggested_replacement":"total","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TOTAL` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:55:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        && let (Ok(AVAILABLE), Ok(TOTAL)) = (PARTS[0].parse::<u64>(), PARTS[1].parse::<u64>())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `total`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `USED` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":2303,"byte_end":2307,"line_start":57,"line_end":57,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let USED = TOTAL.checked_sub(AVAILABLE)","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":2303,"byte_end":2307,"line_start":57,"line_end":57,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let USED = TOTAL.checked_sub(AVAILABLE)","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"used","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `USED` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:57:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let USED = TOTAL.checked_sub(AVAILABLE)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `used`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `USAGE_PERCENT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":2445,"byte_end":2458,"line_start":59,"line_end":59,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"            let USAGE_PERCENT = USED.checked_mul(100).and_then(|x| x.checked_div(TOTAL))","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":2445,"byte_end":2458,"line_start":59,"line_end":59,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"            let USAGE_PERCENT = USED.checked_mul(100).and_then(|x| x.checked_div(TOTAL))","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"usage_percent","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `USAGE_PERCENT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:59:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let USAGE_PERCENT = USED.checked_mul(100).and_then(|x| x.checked_div(TOTAL))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `usage_percent`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `ERROR_MSG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/monitoring.rs","byte_start":2702,"byte_end":2711,"line_start":63,"line_end":63,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"                let ERROR_MSG = format!(\"Disk usage >= {THRESHOLD}%\");","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/monitoring.rs","byte_start":2702,"byte_end":2711,"line_start":63,"line_end":63,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"                let ERROR_MSG = format!(\"Disk usage >= {THRESHOLD}%\");","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":"error_msg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `ERROR_MSG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/monitoring.rs:63:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let ERROR_MSG = format!(\"Disk usage >= {THRESHOLD}%\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `error_msg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"63 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 63 warnings emitted\u001b[0m\n\n"}
